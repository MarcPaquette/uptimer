// Code generated by counterfeiter. DO NOT EDIT.
package cmdRunnerfakes

import (
	"context"
	"sync"

	"github.com/cloudfoundry/uptimer/cmdRunner"
	"github.com/cloudfoundry/uptimer/cmdStartWaiter"
)

type FakeCmdRunner struct {
	RunStub        func(cmdStartWaiter.CmdStartWaiter) error
	runMutex       sync.RWMutex
	runArgsForCall []struct {
		arg1 cmdStartWaiter.CmdStartWaiter
	}
	runReturns struct {
		result1 error
	}
	runReturnsOnCall map[int]struct {
		result1 error
	}
	RunInSequenceStub        func(...cmdStartWaiter.CmdStartWaiter) error
	runInSequenceMutex       sync.RWMutex
	runInSequenceArgsForCall []struct {
		arg1 []cmdStartWaiter.CmdStartWaiter
	}
	runInSequenceReturns struct {
		result1 error
	}
	runInSequenceReturnsOnCall map[int]struct {
		result1 error
	}
	RunInSequenceWithContextStub        func(context.Context, ...cmdStartWaiter.CmdStartWaiter) error
	runInSequenceWithContextMutex       sync.RWMutex
	runInSequenceWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 []cmdStartWaiter.CmdStartWaiter
	}
	runInSequenceWithContextReturns struct {
		result1 error
	}
	runInSequenceWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	RunWithContextStub        func(context.Context, cmdStartWaiter.CmdStartWaiter) error
	runWithContextMutex       sync.RWMutex
	runWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 cmdStartWaiter.CmdStartWaiter
	}
	runWithContextReturns struct {
		result1 error
	}
	runWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCmdRunner) Run(arg1 cmdStartWaiter.CmdStartWaiter) error {
	fake.runMutex.Lock()
	ret, specificReturn := fake.runReturnsOnCall[len(fake.runArgsForCall)]
	fake.runArgsForCall = append(fake.runArgsForCall, struct {
		arg1 cmdStartWaiter.CmdStartWaiter
	}{arg1})
	stub := fake.RunStub
	fakeReturns := fake.runReturns
	fake.recordInvocation("Run", []interface{}{arg1})
	fake.runMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdRunner) RunCallCount() int {
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	return len(fake.runArgsForCall)
}

func (fake *FakeCmdRunner) RunCalls(stub func(cmdStartWaiter.CmdStartWaiter) error) {
	fake.runMutex.Lock()
	defer fake.runMutex.Unlock()
	fake.RunStub = stub
}

func (fake *FakeCmdRunner) RunArgsForCall(i int) cmdStartWaiter.CmdStartWaiter {
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	argsForCall := fake.runArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCmdRunner) RunReturns(result1 error) {
	fake.runMutex.Lock()
	defer fake.runMutex.Unlock()
	fake.RunStub = nil
	fake.runReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCmdRunner) RunReturnsOnCall(i int, result1 error) {
	fake.runMutex.Lock()
	defer fake.runMutex.Unlock()
	fake.RunStub = nil
	if fake.runReturnsOnCall == nil {
		fake.runReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.runReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCmdRunner) RunInSequence(arg1 ...cmdStartWaiter.CmdStartWaiter) error {
	fake.runInSequenceMutex.Lock()
	ret, specificReturn := fake.runInSequenceReturnsOnCall[len(fake.runInSequenceArgsForCall)]
	fake.runInSequenceArgsForCall = append(fake.runInSequenceArgsForCall, struct {
		arg1 []cmdStartWaiter.CmdStartWaiter
	}{arg1})
	stub := fake.RunInSequenceStub
	fakeReturns := fake.runInSequenceReturns
	fake.recordInvocation("RunInSequence", []interface{}{arg1})
	fake.runInSequenceMutex.Unlock()
	if stub != nil {
		return stub(arg1...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdRunner) RunInSequenceCallCount() int {
	fake.runInSequenceMutex.RLock()
	defer fake.runInSequenceMutex.RUnlock()
	return len(fake.runInSequenceArgsForCall)
}

func (fake *FakeCmdRunner) RunInSequenceCalls(stub func(...cmdStartWaiter.CmdStartWaiter) error) {
	fake.runInSequenceMutex.Lock()
	defer fake.runInSequenceMutex.Unlock()
	fake.RunInSequenceStub = stub
}

func (fake *FakeCmdRunner) RunInSequenceArgsForCall(i int) []cmdStartWaiter.CmdStartWaiter {
	fake.runInSequenceMutex.RLock()
	defer fake.runInSequenceMutex.RUnlock()
	argsForCall := fake.runInSequenceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCmdRunner) RunInSequenceReturns(result1 error) {
	fake.runInSequenceMutex.Lock()
	defer fake.runInSequenceMutex.Unlock()
	fake.RunInSequenceStub = nil
	fake.runInSequenceReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCmdRunner) RunInSequenceReturnsOnCall(i int, result1 error) {
	fake.runInSequenceMutex.Lock()
	defer fake.runInSequenceMutex.Unlock()
	fake.RunInSequenceStub = nil
	if fake.runInSequenceReturnsOnCall == nil {
		fake.runInSequenceReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.runInSequenceReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCmdRunner) RunInSequenceWithContext(arg1 context.Context, arg2 ...cmdStartWaiter.CmdStartWaiter) error {
	fake.runInSequenceWithContextMutex.Lock()
	ret, specificReturn := fake.runInSequenceWithContextReturnsOnCall[len(fake.runInSequenceWithContextArgsForCall)]
	fake.runInSequenceWithContextArgsForCall = append(fake.runInSequenceWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 []cmdStartWaiter.CmdStartWaiter
	}{arg1, arg2})
	stub := fake.RunInSequenceWithContextStub
	fakeReturns := fake.runInSequenceWithContextReturns
	fake.recordInvocation("RunInSequenceWithContext", []interface{}{arg1, arg2})
	fake.runInSequenceWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdRunner) RunInSequenceWithContextCallCount() int {
	fake.runInSequenceWithContextMutex.RLock()
	defer fake.runInSequenceWithContextMutex.RUnlock()
	return len(fake.runInSequenceWithContextArgsForCall)
}

func (fake *FakeCmdRunner) RunInSequenceWithContextCalls(stub func(context.Context, ...cmdStartWaiter.CmdStartWaiter) error) {
	fake.runInSequenceWithContextMutex.Lock()
	defer fake.runInSequenceWithContextMutex.Unlock()
	fake.RunInSequenceWithContextStub = stub
}

func (fake *FakeCmdRunner) RunInSequenceWithContextArgsForCall(i int) (context.Context, []cmdStartWaiter.CmdStartWaiter) {
	fake.runInSequenceWithContextMutex.RLock()
	defer fake.runInSequenceWithContextMutex.RUnlock()
	argsForCall := fake.runInSequenceWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdRunner) RunInSequenceWithContextReturns(result1 error) {
	fake.runInSequenceWithContextMutex.Lock()
	defer fake.runInSequenceWithContextMutex.Unlock()
	fake.RunInSequenceWithContextStub = nil
	fake.runInSequenceWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCmdRunner) RunInSequenceWithContextReturnsOnCall(i int, result1 error) {
	fake.runInSequenceWithContextMutex.Lock()
	defer fake.runInSequenceWithContextMutex.Unlock()
	fake.RunInSequenceWithContextStub = nil
	if fake.runInSequenceWithContextReturnsOnCall == nil {
		fake.runInSequenceWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.runInSequenceWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCmdRunner) RunWithContext(arg1 context.Context, arg2 cmdStartWaiter.CmdStartWaiter) error {
	fake.runWithContextMutex.Lock()
	ret, specificReturn := fake.runWithContextReturnsOnCall[len(fake.runWithContextArgsForCall)]
	fake.runWithContextArgsForCall = append(fake.runWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 cmdStartWaiter.CmdStartWaiter
	}{arg1, arg2})
	stub := fake.RunWithContextStub
	fakeReturns := fake.runWithContextReturns
	fake.recordInvocation("RunWithContext", []interface{}{arg1, arg2})
	fake.runWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCmdRunner) RunWithContextCallCount() int {
	fake.runWithContextMutex.RLock()
	defer fake.runWithContextMutex.RUnlock()
	return len(fake.runWithContextArgsForCall)
}

func (fake *FakeCmdRunner) RunWithContextCalls(stub func(context.Context, cmdStartWaiter.CmdStartWaiter) error) {
	fake.runWithContextMutex.Lock()
	defer fake.runWithContextMutex.Unlock()
	fake.RunWithContextStub = stub
}

func (fake *FakeCmdRunner) RunWithContextArgsForCall(i int) (context.Context, cmdStartWaiter.CmdStartWaiter) {
	fake.runWithContextMutex.RLock()
	defer fake.runWithContextMutex.RUnlock()
	argsForCall := fake.runWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCmdRunner) RunWithContextReturns(result1 error) {
	fake.runWithContextMutex.Lock()
	defer fake.runWithContextMutex.Unlock()
	fake.RunWithContextStub = nil
	fake.runWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCmdRunner) RunWithContextReturnsOnCall(i int, result1 error) {
	fake.runWithContextMutex.Lock()
	defer fake.runWithContextMutex.Unlock()
	fake.RunWithContextStub = nil
	if fake.runWithContextReturnsOnCall == nil {
		fake.runWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.runWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCmdRunner) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	fake.runInSequenceMutex.RLock()
	defer fake.runInSequenceMutex.RUnlock()
	fake.runInSequenceWithContextMutex.RLock()
	defer fake.runInSequenceWithContextMutex.RUnlock()
	fake.runWithContextMutex.RLock()
	defer fake.runWithContextMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCmdRunner) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ cmdRunner.CmdRunner = new(FakeCmdRunner)
