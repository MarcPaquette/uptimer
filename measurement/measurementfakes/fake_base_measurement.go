// Code generated by counterfeiter. DO NOT EDIT.
package measurementfakes

import (
	"sync"

	"github.com/cloudfoundry/uptimer/measurement"
)

type FakeBaseMeasurement struct {
	NameStub        func() string
	nameMutex       sync.RWMutex
	nameArgsForCall []struct {
	}
	nameReturns struct {
		result1 string
	}
	nameReturnsOnCall map[int]struct {
		result1 string
	}
	PerformMeasurementStub        func() (string, string, string, bool)
	performMeasurementMutex       sync.RWMutex
	performMeasurementArgsForCall []struct {
	}
	performMeasurementReturns struct {
		result1 string
		result2 string
		result3 string
		result4 bool
	}
	performMeasurementReturnsOnCall map[int]struct {
		result1 string
		result2 string
		result3 string
		result4 bool
	}
	SummaryPhraseStub        func() string
	summaryPhraseMutex       sync.RWMutex
	summaryPhraseArgsForCall []struct {
	}
	summaryPhraseReturns struct {
		result1 string
	}
	summaryPhraseReturnsOnCall map[int]struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeBaseMeasurement) Name() string {
	fake.nameMutex.Lock()
	ret, specificReturn := fake.nameReturnsOnCall[len(fake.nameArgsForCall)]
	fake.nameArgsForCall = append(fake.nameArgsForCall, struct {
	}{})
	fake.recordInvocation("Name", []interface{}{})
	fake.nameMutex.Unlock()
	if fake.NameStub != nil {
		return fake.NameStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.nameReturns
	return fakeReturns.result1
}

func (fake *FakeBaseMeasurement) NameCallCount() int {
	fake.nameMutex.RLock()
	defer fake.nameMutex.RUnlock()
	return len(fake.nameArgsForCall)
}

func (fake *FakeBaseMeasurement) NameCalls(stub func() string) {
	fake.nameMutex.Lock()
	defer fake.nameMutex.Unlock()
	fake.NameStub = stub
}

func (fake *FakeBaseMeasurement) NameReturns(result1 string) {
	fake.nameMutex.Lock()
	defer fake.nameMutex.Unlock()
	fake.NameStub = nil
	fake.nameReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeBaseMeasurement) NameReturnsOnCall(i int, result1 string) {
	fake.nameMutex.Lock()
	defer fake.nameMutex.Unlock()
	fake.NameStub = nil
	if fake.nameReturnsOnCall == nil {
		fake.nameReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.nameReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeBaseMeasurement) PerformMeasurement() (string, string, string, bool) {
	fake.performMeasurementMutex.Lock()
	ret, specificReturn := fake.performMeasurementReturnsOnCall[len(fake.performMeasurementArgsForCall)]
	fake.performMeasurementArgsForCall = append(fake.performMeasurementArgsForCall, struct {
	}{})
	fake.recordInvocation("PerformMeasurement", []interface{}{})
	fake.performMeasurementMutex.Unlock()
	if fake.PerformMeasurementStub != nil {
		return fake.PerformMeasurementStub()
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3, ret.result4
	}
	fakeReturns := fake.performMeasurementReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3, fakeReturns.result4
}

func (fake *FakeBaseMeasurement) PerformMeasurementCallCount() int {
	fake.performMeasurementMutex.RLock()
	defer fake.performMeasurementMutex.RUnlock()
	return len(fake.performMeasurementArgsForCall)
}

func (fake *FakeBaseMeasurement) PerformMeasurementCalls(stub func() (string, string, string, bool)) {
	fake.performMeasurementMutex.Lock()
	defer fake.performMeasurementMutex.Unlock()
	fake.PerformMeasurementStub = stub
}

func (fake *FakeBaseMeasurement) PerformMeasurementReturns(result1 string, result2 string, result3 string, result4 bool) {
	fake.performMeasurementMutex.Lock()
	defer fake.performMeasurementMutex.Unlock()
	fake.PerformMeasurementStub = nil
	fake.performMeasurementReturns = struct {
		result1 string
		result2 string
		result3 string
		result4 bool
	}{result1, result2, result3, result4}
}

func (fake *FakeBaseMeasurement) PerformMeasurementReturnsOnCall(i int, result1 string, result2 string, result3 string, result4 bool) {
	fake.performMeasurementMutex.Lock()
	defer fake.performMeasurementMutex.Unlock()
	fake.PerformMeasurementStub = nil
	if fake.performMeasurementReturnsOnCall == nil {
		fake.performMeasurementReturnsOnCall = make(map[int]struct {
			result1 string
			result2 string
			result3 string
			result4 bool
		})
	}
	fake.performMeasurementReturnsOnCall[i] = struct {
		result1 string
		result2 string
		result3 string
		result4 bool
	}{result1, result2, result3, result4}
}

func (fake *FakeBaseMeasurement) SummaryPhrase() string {
	fake.summaryPhraseMutex.Lock()
	ret, specificReturn := fake.summaryPhraseReturnsOnCall[len(fake.summaryPhraseArgsForCall)]
	fake.summaryPhraseArgsForCall = append(fake.summaryPhraseArgsForCall, struct {
	}{})
	fake.recordInvocation("SummaryPhrase", []interface{}{})
	fake.summaryPhraseMutex.Unlock()
	if fake.SummaryPhraseStub != nil {
		return fake.SummaryPhraseStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.summaryPhraseReturns
	return fakeReturns.result1
}

func (fake *FakeBaseMeasurement) SummaryPhraseCallCount() int {
	fake.summaryPhraseMutex.RLock()
	defer fake.summaryPhraseMutex.RUnlock()
	return len(fake.summaryPhraseArgsForCall)
}

func (fake *FakeBaseMeasurement) SummaryPhraseCalls(stub func() string) {
	fake.summaryPhraseMutex.Lock()
	defer fake.summaryPhraseMutex.Unlock()
	fake.SummaryPhraseStub = stub
}

func (fake *FakeBaseMeasurement) SummaryPhraseReturns(result1 string) {
	fake.summaryPhraseMutex.Lock()
	defer fake.summaryPhraseMutex.Unlock()
	fake.SummaryPhraseStub = nil
	fake.summaryPhraseReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeBaseMeasurement) SummaryPhraseReturnsOnCall(i int, result1 string) {
	fake.summaryPhraseMutex.Lock()
	defer fake.summaryPhraseMutex.Unlock()
	fake.SummaryPhraseStub = nil
	if fake.summaryPhraseReturnsOnCall == nil {
		fake.summaryPhraseReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.summaryPhraseReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeBaseMeasurement) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.nameMutex.RLock()
	defer fake.nameMutex.RUnlock()
	fake.performMeasurementMutex.RLock()
	defer fake.performMeasurementMutex.RUnlock()
	fake.summaryPhraseMutex.RLock()
	defer fake.summaryPhraseMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeBaseMeasurement) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ measurement.BaseMeasurement = new(FakeBaseMeasurement)
